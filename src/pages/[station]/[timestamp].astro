---
import Layout from "../../layouts/Layout.astro";
import { decode } from "html-entities";
import { getStationConfig } from "../../config/stations";

const { station, timestamp } = Astro.params;
const stationConfig = getStationConfig(station!);
if (!stationConfig) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}
const {
  audioLoggerUrl,
  stationName,
  stationBluesky,
  stationColor,
  stationColorDark,
  openGraphImage,
  faviconUrl,
  logoUrl,
} = stationConfig;

let dateRegex = /^(\d{4})-(\d{2})-(\d{2})_(\d{2})$/;
if (!timestamp || !dateRegex.test(timestamp)) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

let audioUrl = `${audioLoggerUrl}/${timestamp}.mp3`;

// Check if the audio file exists
let audioResponse = await fetch(audioUrl, { method: "HEAD" });
if (!audioResponse.ok) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const t = Astro.url.searchParams.get("t");
const e = Astro.url.searchParams.get("e");
let startTime = 0;
let endTime = 0;
if (t) {
  startTime = parseInt(t, 10);
  audioUrl += "#t=" + startTime;
}
if (e) {
  endTime = parseInt(e, 10);
}

// Decoder for HTML entities
function decodeHtmlEntities(text: string): string {
  if (!text) return "";
  return decode(text);
}

let metadataResponse = await fetch(`${audioLoggerUrl}/${timestamp}.meta`);
let showName = decodeHtmlEntities((await metadataResponse.text()).trim());
if (!showName) {
  showName = "Onbekend programma";
}

// Timestamp is in the form of 2024-05-18_11. Convert that into a date object using a regex
let [, year, month, day, hour] = timestamp.match(dateRegex)!;
let showDate = new Date(
  Number(year),
  Number(month) - 1,
  Number(day),
  Number(hour),
);

const title = `${showName} van ${showDate.toLocaleDateString("NL", { dateStyle: "medium" })} om ${showDate.getHours()} uur`;
const description = `Luister ${showName} van ${showDate.toLocaleDateString("NL", { dateStyle: "medium" })} om ${showDate.getHours()} uur op ${stationName} terug.`;
---

<Layout
  brandColor={stationColor}
  brandColorDark={stationColorDark}
  faviconUrl={faviconUrl}
>
  <title slot="head">{title}</title>
  <script
    slot="head"
    is:inline
    defer
    event-station={stationName}
    event-program={showName}
    src="https://stats.zuidwesttv.nl/js/script.pageview-props.js"></script>
  <meta slot="head" name="description" content={description} />
  <meta slot="head" property="og:title" content={`ðŸ“» ${title}`} />
  <meta slot="head" property="og:description" content={description} />
  <meta slot="head" property="og:type" content="music.song" />
  <meta slot="head" property="og:site_name" content={stationName} />
  <meta slot="head" property="og:image" content={openGraphImage} />
  <meta slot="head" property="og:locale" content="nl_NL" />

  <main class="grid min-h-full place-items-center px-4 py-8">
    <div
      class="w-full max-w-2xl overflow-hidden rounded-xl bg-white shadow-md dark:bg-gray-800 dark:shadow-xl"
    >
      <div
        class="from-brand to-brand-dark relative bg-gradient-to-r p-6 text-white"
      >
        <div class="pr-12">
          <h1 class="text-2xl font-bold">{showName}</h1>
          <p class="mt-1 text-sm opacity-90">
            {showDate.toLocaleDateString("nl", { dateStyle: "medium" })}
            {" om "}
            {showDate.toLocaleTimeString("nl", { timeStyle: "short" })}
          </p>
        </div>
        <div class="absolute top-1/2 right-6 -translate-y-1/2 flex items-center gap-2">
          <button
            id="js-clip-button"
            class="rounded-full bg-white/20 p-2 backdrop-blur transition-all duration-200 hover:bg-white/30 focus:ring-2 focus:ring-white/50 focus:outline-none"
            title="Maak een clip"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="size-5"
            >
              <circle cx="6" cy="6" r="3"/>
              <circle cx="6" cy="18" r="3"/>
              <line x1="20" y1="4" x2="8.12" y2="15.88"/>
              <line x1="14.47" y1="14.48" x2="20" y2="20"/>
              <line x1="8.12" y1="8.12" x2="12" y2="12"/>
            </svg>
          </button>
          <a
            href={audioUrl}
            class="rounded-full bg-white/20 p-2 backdrop-blur transition-all duration-200 hover:bg-white/30 focus:ring-2 focus:ring-white/50 focus:outline-none"
            title="Downloaden"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              class="size-5"
            >
              <path
                d="M10.75 2.75a.75.75 0 0 0-1.5 0v8.614L6.295 8.235a.75.75 0 1 0-1.09 1.03l4.25 4.5a.75.75 0 0 0 1.09 0l4.25-4.5a.75.75 0 0 0-1.09-1.03l-2.955 3.129V2.75Z"
              ></path>
              <path
                d="M3.5 12.75a.75.75 0 0 0-1.5 0v2.5A2.75 2.75 0 0 0 4.75 18h10.5A2.75 2.75 0 0 0 18 15.25v-2.5a.75.75 0 0 0-1.5 0v2.5c0 .69-.56 1.25-1.25 1.25H4.75c-.69 0-1.25-.56-1.25-1.25v-2.5Z"
              ></path>
            </svg>
          </a>
        </div>
      </div>
      <div class="p-6">
        <audio
          id="js-audio"
          src={audioUrl}
          data-start-time={startTime}
          data-end-time={endTime}
          data-show-name={showName}
          data-station-name={stationName}
          data-station-logo={logoUrl}
          data-show-date={showDate.toLocaleDateString("nl", {
            dateStyle: "medium",
          })}></audio>
        <div class="mb-8">
          <div class="flex flex-col items-center space-y-6">
            <button
              id="js-play"
              class="group from-brand to-brand-dark relative size-20 rounded-full bg-gradient-to-br text-white shadow-xl transition-all duration-300 hover:scale-105 hover:shadow-2xl active:scale-95"
            >
              <div
                class="absolute inset-0 rounded-full bg-white opacity-0 transition-opacity duration-300 group-hover:opacity-10"
              >
              </div>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="currentColor"
                class="absolute top-1/2 left-1/2 w-10 -translate-x-1/2 -translate-y-1/2 transition-transform duration-200 group-hover:scale-110 group-data-[state=playing]:hidden"
              >
                <path
                  fill-rule="evenodd"
                  d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z"
                  clip-rule="evenodd"></path>
              </svg>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="currentColor"
                class="absolute top-1/2 left-1/2 hidden w-10 -translate-x-1/2 -translate-y-1/2 transition-transform duration-200 group-hover:scale-110 group-data-[state=playing]:block"
              >
                <path
                  fill-rule="evenodd"
                  d="M6.75 5.25a.75.75 0 0 1 .75-.75H9a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H7.5a.75.75 0 0 1-.75-.75V5.25Zm7.5 0A.75.75 0 0 1 15 4.5h1.5a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H15a.75.75 0 0 1-.75-.75V5.25Z"
                  clip-rule="evenodd"></path>
              </svg>
            </button>

            <div class="w-full space-y-3">
              <div class="relative">
                <!-- Main audio progress bar -->
                <input
                  id="js-audio-track"
                  class="[&::-moz-range-progress]:bg-brand h-2 w-full cursor-pointer appearance-none rounded-full bg-gray-200 dark:bg-gray-700 [&::-moz-range-progress]:h-2 [&::-moz-range-progress]:rounded-full [&::-moz-range-thumb]:h-4 [&::-moz-range-thumb]:w-4 [&::-moz-range-thumb]:cursor-pointer [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:border-0 [&::-moz-range-thumb]:bg-white [&::-moz-range-thumb]:shadow-[0_0_0_1px_rgba(0,0,0,0.1),0_2px_4px_rgba(0,0,0,0.2),0_4px_8px_rgba(0,0,0,0.1)] [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:duration-200 [&::-moz-range-thumb]:hover:scale-110 [&::-moz-range-thumb]:hover:shadow-[0_0_0_1px_rgba(0,0,0,0.1),0_2px_6px_rgba(0,0,0,0.3),0_8px_16px_rgba(0,0,0,0.15)] [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-white [&::-webkit-slider-thumb]:shadow-[0_0_0_1px_rgba(0,0,0,0.1),0_2px_4px_rgba(0,0,0,0.2),0_4px_8px_rgba(0,0,0,0.1)] [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:duration-200 [&::-webkit-slider-thumb]:hover:scale-110 [&::-webkit-slider-thumb]:hover:shadow-[0_0_0_1px_rgba(0,0,0,0.1),0_2px_6px_rgba(0,0,0,0.3),0_8px_16px_rgba(0,0,0,0.15)]"
                  type="range"
                  max="100"
                  value="0"
                  style="background-image: linear-gradient(to right, var(--brand-color) 0%, var(--brand-color) 0%, #e5e7eb 0%, #e5e7eb 100%)"
                />
                <!-- Clip range indicator -->
                <div id="js-clip-range" class="pointer-events-none absolute inset-0 hidden">
                  <div id="js-clip-range-bar" class="absolute top-0 h-2 rounded-full bg-brand/30"></div>
                </div>
                
              </div>
              <div
                class="flex items-center justify-between text-sm text-gray-600 dark:text-gray-300"
              >
                <span class="js-current-time font-medium tabular-nums"
                  >00:00</span
                >
                <span id="js-duration" class="font-medium tabular-nums text-gray-500 dark:text-gray-400"
                  >0:00</span
                >
              </div>
            </div>
          </div>
        </div>

        <div class="border-t border-gray-200 pt-6 dark:border-gray-700">
          <p
            class="mb-4 text-sm font-semibold tracking-wider text-gray-600 uppercase dark:text-gray-300"
          >
            Deel dit op
          </p>
          <div class="-m-1 mb-2 flex flex-wrap items-center">
            <a
              id="js-share-bluesky"
              href="#"
              target="_blank"
              class="text-social-bluesky border-social-bluesky m-1 flex items-center rounded-lg border px-2 py-1 text-sm transition-all duration-200 hover:shadow-md"
              data-bluesky-handle={stationBluesky}
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 600 530"
                class="mr-1.5 fill-current"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="m135.72 44.03c66.496 49.921 138.02 151.14 164.28 205.46 26.262-54.316 97.782-155.54 164.28-205.46 47.98-36.021 125.72-63.892 125.72 24.795 0 17.712-10.155 148.79-16.111 170.07-20.703 73.984-96.144 92.854-163.25 81.433 117.3 19.964 147.14 86.092 82.697 152.22-122.39 125.59-175.91-31.511-189.63-71.766-2.514-7.3797-3.6904-10.832-3.7077-7.8964-0.0174-2.9357-1.1937 0.51669-3.7077 7.8964-13.714 40.255-67.233 197.36-189.63 71.766-64.444-66.128-34.605-132.26 82.697-152.22-67.108 11.421-142.55-7.4491-163.25-81.433-5.9562-21.282-16.111-152.36-16.111-170.07 0-88.687 77.742-60.816 125.72-24.795z"
                ></path>
              </svg>
              Bluesky</a
            >
            <a
              id="js-share-facebook"
              href="#"
              target="_blank"
              class="text-social-facebook dark:text-social-facebook-dark border-social-facebook dark:border-social-facebook-dark m-1 flex items-center rounded-lg border px-2 py-1 text-sm transition-all duration-200 hover:shadow-md"
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                class="mr-1.5 fill-current"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M9.198 21.5h4v-8.01h3.604l.396-3.98h-4V7.5a1 1 0 0 1 1-1h3v-4h-3a5 5 0 0 0-5 5v2.01h-2l-.396 3.98h2.396v8.01z"
                ></path>
              </svg>
              Facebook</a
            >
            <a
              id="js-share-whatsapp"
              href="#"
              class="text-social-whatsapp border-social-whatsapp m-1 flex items-center rounded-lg border px-2 py-1 text-sm transition-all duration-200 hover:shadow-md"
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                class="mr-1.5 fill-current"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"
                ></path>
              </svg>
              WhatsApp</a
            >
            <a
              id="js-share-mail"
              href="#"
              class="text-social-email dark:text-social-email-dark border-social-email dark:border-social-email-dark m-1 flex flex-none items-center rounded-lg border px-2 py-1 text-sm whitespace-nowrap transition-all duration-200 hover:shadow-md"
            >
              <svg
                width="16"
                height="16"
                class="mr-1.5 fill-current"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
              >
                <path
                  d="M 12 2 C 6.4886661 2 2 6.4886661 2 12 C 2 17.511334 6.4886661 22 12 22 L 16 22 A 1.0001 1.0001 0 1 0 16 20 L 12 20 C 7.5693339 20 4 16.430666 4 12 C 4 7.5693339 7.5693339 4 12 4 C 16.430666 4 20 7.5693339 20 12 L 20 13.5 C 20 14.340812 19.340812 15 18.5 15 C 17.659188 15 17 14.340812 17 13.5 L 17 12 A 1.0001 1.0001 0 0 0 16.994141 11.888672 C 16.933859 9.1903924 14.712044 7 12 7 C 9.2504209 7 7 9.2504209 7 12 C 7 14.749579 9.2504209 17 12 17 C 13.413556 17 14.687859 16.398875 15.599609 15.447266 C 16.230695 16.380863 17.297708 17 18.5 17 C 20.421188 17 22 15.421188 22 13.5 L 22 12 C 22 6.4886661 17.511334 2 12 2 z M 12 9 C 13.668699 9 15 10.331301 15 12 C 15 13.668699 13.668699 15 12 15 C 10.331301 15 9 13.668699 9 12 C 9 10.331301 10.331301 9 12 9 z"
                ></path>
              </svg>
              E-mail</a
            >
          </div>
        </div>
      </div>
    </div>
  </main>
  
  <!-- Clip Editor Modal -->
  <div id="js-clip-modal" class="fixed inset-0 z-50 hidden overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4">
      <!-- Background overlay -->
      <div class="fixed inset-0 bg-black/60 backdrop-blur-sm transition-opacity" id="js-modal-backdrop"></div>
      
      <!-- Modal content -->
      <div class="relative w-full max-w-3xl rounded-lg bg-white p-6 shadow-xl dark:bg-gray-900">
        <div class="mb-4 flex items-center justify-between">
          <h2 class="text-xl font-bold text-gray-900 dark:text-white">Maak een clip</h2>
          <button
            id="js-close-modal"
            class="rounded-lg p-1 text-gray-400 hover:bg-gray-100 hover:text-gray-500 dark:hover:bg-gray-800 dark:hover:text-gray-300"
          >
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <div class="mb-6">
          <div class="mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">
            {showName} - {showDate.toLocaleDateString("nl", { dateStyle: "medium" })}
          </div>
          
          <!-- Mini player -->
          <div class="mb-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-800">
            <audio id="js-clip-audio" preload="metadata">
              <source src={audioUrl.split('#')[0]} type="audio/mpeg" />
            </audio>
            <div class="mb-3 flex items-center justify-center gap-2">
              <button
                id="js-preview-start"
                class="rounded-full bg-gray-200 p-2 text-gray-700 transition-all hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                title="Preview begin van clip (3 sec)"
              >
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 19l-7-7 7-7m8 14l-7-7 7-7"></path>
                </svg>
              </button>
              <button
                id="js-clip-play"
                class="from-brand to-brand-dark rounded-full bg-gradient-to-br p-3 text-white shadow-lg transition-all hover:shadow-xl hover:scale-105"
                title="Speel hele clip af"
              >
                <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z"/>
                </svg>
              </button>
              <button
                id="js-preview-end"
                class="rounded-full bg-gray-200 p-2 text-gray-700 transition-all hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                title="Preview einde van clip (3 sec)"
              >
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5l7 7-7 7M5 5l7 7-7 7"></path>
                </svg>
              </button>
            </div>
            
            <!-- Timeline with markers -->
            <div class="relative mb-2">
              <input
                id="js-clip-timeline"
                type="range"
                class="h-2 w-full cursor-pointer appearance-none rounded-full bg-gray-200 dark:bg-gray-700"
                min="0"
                max="100"
                value="0"
              />
              <div id="js-clip-selection" class="absolute top-0 h-2 bg-brand/30 rounded-full pointer-events-none"></div>
              <div id="js-clip-start-marker" class="absolute top-1/2 w-4 h-4 bg-brand rounded-full -translate-y-1/2 cursor-ew-resize shadow-md border-2 border-white"></div>
              <div id="js-clip-end-marker" class="absolute top-1/2 w-4 h-4 bg-brand rounded-full -translate-y-1/2 cursor-ew-resize shadow-md border-2 border-white"></div>
            </div>
            
            <div class="flex items-center justify-between text-sm text-gray-600 dark:text-gray-400">
              <span>Start: <span id="js-clip-start-time" class="font-medium">0:00</span></span>
              <span>Duur: <span id="js-clip-duration" class="font-medium">0:00</span></span>
              <span>Eind: <span id="js-clip-end-time" class="font-medium">0:00</span></span>
            </div>
          </div>
          
          <div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Sleep de markers om start- en eindtijd aan te passen</span>
          </div>
        </div>
        
        <div class="flex justify-end gap-3">
          <button
            id="js-cancel-clip-modal"
            class="rounded-lg border border-gray-300 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-800"
          >
            Annuleren
          </button>
          <button
            id="js-create-clip"
            class="from-brand to-brand-dark rounded-lg bg-gradient-to-r px-4 py-2 text-sm font-medium text-white shadow-sm transition-all hover:shadow-md"
          >
            Clip maken en delen
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  const calculateTime = (secs: number) => {
    const minutes = ("0" + Math.floor(secs / 60)).slice(-2);
    const seconds = ("0" + Math.floor(secs % 60)).slice(-2);
    return `${minutes}:${seconds}`;
  };

  const updateCurrentTime = () => {
    for (const container of currentTimeContainers) {
      container.textContent = calculateTime(Number(seekSlider.value));
    }
    // Update slider progress visual
    const percentage =
      (Number(seekSlider.value) / Number(seekSlider.max)) * 100;
    const isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    const bgColor = isDark ? "#374151" : "#e5e7eb";
    seekSlider.style.backgroundImage = `linear-gradient(to right, var(--brand-color) 0%, var(--brand-color) ${percentage}%, ${bgColor} ${percentage}%, ${bgColor} 100%)`;
  };

  // Modal functions
  const openClipModal = () => {
    clipModal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    // Smart clip defaults
    clipDuration = audio.duration;
    const hasPlayed = audio.currentTime > 0 && !audio.paused;
    
    if (hasPlayed) {
      // Use current position as the center of a 10-minute clip
      const currentTime = audio.currentTime;
      clipStartTime = Math.max(0, currentTime - 300); // 5 minutes before
      clipEndTime = Math.min(audio.duration, currentTime + 300); // 5 minutes after
    } else {
      // Start at 25% of duration with 10-minute clip
      clipStartTime = audio.duration * 0.25;
      clipEndTime = Math.min(audio.duration, clipStartTime + 600); // 10 minutes
    }
    
    // Set up clip audio
    clipAudio.currentTime = clipStartTime;
    clipTimeline.max = String(Math.floor(clipDuration));
    clipTimeline.value = String(Math.floor(currentTime));
    
    updateClipUI();
  };

  const closeClipModal = () => {
    clipModal.classList.add('hidden');
    document.body.style.overflow = '';
    if (!clipAudio.paused) {
      clipAudio.pause();
    }
  };

  const updateClipUI = () => {
    const startPercent = (clipStartTime / clipDuration) * 100;
    const endPercent = (clipEndTime / clipDuration) * 100;
    
    // Update markers
    clipStartMarker.style.left = `${startPercent}%`;
    clipEndMarker.style.left = `${endPercent}%`;
    
    // Update selection range
    clipSelection.style.left = `${startPercent}%`;
    clipSelection.style.width = `${endPercent - startPercent}%`;
    
    // Update time displays
    clipStartTimeSpan.textContent = calculateTime(clipStartTime);
    clipEndTimeSpan.textContent = calculateTime(clipEndTime);
    clipDurationSpan.textContent = calculateTime(clipEndTime - clipStartTime);
  };

  const setupClipDragAndDrop = () => {
    const getTimeFromMouseX = (mouseX: number) => {
      const rect = clipTimeline.getBoundingClientRect();
      const relativeX = mouseX - rect.left;
      const percentage = Math.max(0, Math.min(1, relativeX / rect.width));
      return percentage * clipDuration;
    };

    const handleMarkerMouseDown = (e: MouseEvent, target: 'start' | 'end') => {
      e.preventDefault();
      isDragging = true;
      dragTarget = target;
      
      const handleMouseMove = (e: MouseEvent) => {
        if (!isDragging || !dragTarget) return;
        
        const newTime = getTimeFromMouseX(e.clientX);
        
        if (dragTarget === 'start') {
          clipStartTime = Math.max(0, Math.min(newTime, clipEndTime - 1));
        } else {
          clipEndTime = Math.max(clipStartTime + 1, Math.min(newTime, clipDuration));
        }
        
        updateClipUI();
      };
      
      const handleMouseUp = () => {
        isDragging = false;
        dragTarget = null;
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
      
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    };

    clipStartMarker.addEventListener('mousedown', (e) => handleMarkerMouseDown(e, 'start'));
    clipEndMarker.addEventListener('mousedown', (e) => handleMarkerMouseDown(e, 'end'));
  };

  const whilePlaying = () => {
    seekSlider.value = "" + Math.floor(audio.currentTime);
    updateCurrentTime();
    
    // No auto-pause for clips in this simple version
    
    // Update media session position periodically if duration is known
    if ('mediaSession' in navigator && 'setPositionState' in navigator.mediaSession) {
      if (isFinite(audio.duration) && audio.duration > 0) {
        try {
          navigator.mediaSession.setPositionState({
            duration: audio.duration,
            playbackRate: audio.playbackRate,
            position: audio.currentTime
          });
        } catch (error) {
          // Silently ignore to avoid console noise
        }
      }
    }
    
    raf = requestAnimationFrame(whilePlaying);
  };

  const initPlayer = () => {
    audio.currentTime = audio.dataset.startTime
      ? Number(audio.dataset.startTime)
      : 0;
    seekSlider.max = "" + Math.floor(audio.duration);
    seekSlider.value = "" + Math.floor(audio.currentTime);
    updateCurrentTime();
    durationContainer.textContent = calculateTime(audio.duration);
    
    
  };

  const updateSharelinks = (hasClip: boolean = false) => {
    let link = new URL(window.location.href);
    link.searchParams.set("utm_medium", "social");
    link.searchParams.set("utm_campaign", "sharebutton");
    
    // Clear existing parameters
    link.searchParams.delete("t");
    link.searchParams.delete("e");
    
    // If we have a clip, add the parameters
    if (hasClip) {
      link.searchParams.set("t", String(Math.floor(clipStartTime)));
      link.searchParams.set("e", String(Math.floor(clipEndTime)));
    }

    const shareBluesky = document.getElementById(
      "js-share-bluesky",
    ) as HTMLAnchorElement;
    const shareFacebook = document.getElementById(
      "js-share-facebook",
    ) as HTMLAnchorElement;
    const shareWhatsapp = document.getElementById(
      "js-share-whatsapp",
    ) as HTMLAnchorElement;
    const shareMail = document.getElementById(
      "js-share-mail",
    ) as HTMLAnchorElement;

    // Bluesky
    const blueskyLink = new URL(link);
    blueskyLink.searchParams.set("utm_source", "Bluesky");

    const blueskyShareUrl = new URL("https://bsky.app/intent/compose");
    blueskyShareUrl.searchParams.set("text", blueskyLink.toString());
    shareBluesky.href = blueskyShareUrl.toString();

    // Facebook
    const facebookLink = new URL(link);
    facebookLink.searchParams.set("utm_source", "Facebook");

    const facebookShareUrl = new URL("https://www.facebook.com/sharer.php");
    facebookShareUrl.searchParams.set("u", facebookLink.toString());
    shareFacebook.href = facebookShareUrl.toString();

    // WhatsApp
    const whatsAppLink = new URL(link);
    whatsAppLink.searchParams.set("utm_source", "WhatsApp");

    const whatsAppShareUrl = new URL("whatsapp://send");
    whatsAppShareUrl.searchParams.set("text", whatsAppLink.toString());
    shareWhatsapp.href = whatsAppShareUrl.toString();

    // Mail
    const mailLink = new URL(link);
    mailLink.searchParams.set("utm_source", "E-mail");

    const mailShareUrl = new URL("mailto:");
    mailShareUrl.searchParams.set("body", mailLink.toString());
    shareMail.href = mailShareUrl.toString();
  };

  const audio = document.getElementById("js-audio") as HTMLAudioElement;
  const seekSlider = document.getElementById(
    "js-audio-track",
  ) as HTMLInputElement;
  const durationContainer = document.getElementById(
    "js-duration",
  ) as HTMLSpanElement;
  const currentTimeContainers =
    document.getElementsByClassName("js-current-time");
  const playIconContainer = document.getElementById(
    "js-play",
  ) as HTMLSpanElement;
  
  // Modal elements
  const clipButton = document.getElementById("js-clip-button") as HTMLButtonElement;
  const clipModal = document.getElementById("js-clip-modal") as HTMLDivElement;
  const modalBackdrop = document.getElementById("js-modal-backdrop") as HTMLDivElement;
  const closeModalBtn = document.getElementById("js-close-modal") as HTMLButtonElement;
  const cancelClipModalBtn = document.getElementById("js-cancel-clip-modal") as HTMLButtonElement;
  const createClipBtn = document.getElementById("js-create-clip") as HTMLButtonElement;
  
  // Clip editor elements
  const clipAudio = document.getElementById("js-clip-audio") as HTMLAudioElement;
  const clipPlayBtn = document.getElementById("js-clip-play") as HTMLButtonElement;
  const clipTimeline = document.getElementById("js-clip-timeline") as HTMLInputElement;
  const previewStartBtn = document.getElementById("js-preview-start") as HTMLButtonElement;
  const previewEndBtn = document.getElementById("js-preview-end") as HTMLButtonElement;
  const clipRange = document.getElementById("js-clip-range") as HTMLDivElement;
  const clipRangeBar = document.getElementById("js-clip-range-bar") as HTMLDivElement;
  const clipSelection = document.getElementById("js-clip-selection") as HTMLDivElement;
  const clipStartMarker = document.getElementById("js-clip-start-marker") as HTMLDivElement;
  const clipEndMarker = document.getElementById("js-clip-end-marker") as HTMLDivElement;
  const clipStartTimeSpan = document.getElementById("js-clip-start-time") as HTMLSpanElement;
  const clipEndTimeSpan = document.getElementById("js-clip-end-time") as HTMLSpanElement;
  const clipDurationSpan = document.getElementById("js-clip-duration") as HTMLSpanElement;
  
  let raf: number | null = null;
  let clipStartTime: number = 0;
  let clipEndTime: number = 0;
  let clipDuration: number = 0;
  let isDragging: boolean = false;
  let dragTarget: 'start' | 'end' | null = null;

  // Media Session API setup
  if ("mediaSession" in navigator) {
    const showName = audio.dataset.showName || "Onbekend programma";
    const stationName = audio.dataset.stationName || "";
    const stationLogo = audio.dataset.stationLogo || "";
    const showDate = audio.dataset.showDate || "";

    navigator.mediaSession.metadata = new MediaMetadata({
      title: showName,
      artist: stationName,
      album: `Uitzending van ${showDate}`,
      artwork: [
        { src: stationLogo, sizes: "96x96", type: "image/png" },
        { src: stationLogo, sizes: "128x128", type: "image/png" },
        { src: stationLogo, sizes: "192x192", type: "image/png" },
        { src: stationLogo, sizes: "256x256", type: "image/png" },
        { src: stationLogo, sizes: "384x384", type: "image/png" },
        { src: stationLogo, sizes: "512x512", type: "image/png" },
      ],
    });

    navigator.mediaSession.setActionHandler("play", () => {
      audio.play();
    });

    navigator.mediaSession.setActionHandler("pause", () => {
      audio.pause();
    });

    navigator.mediaSession.setActionHandler("seekbackward", (details) => {
      const skipTime = details.seekOffset || 10;
      audio.currentTime = Math.max(audio.currentTime - skipTime, 0);
    });

    navigator.mediaSession.setActionHandler("seekforward", (details) => {
      const skipTime = details.seekOffset || 10;
      audio.currentTime = Math.min(
        audio.currentTime + skipTime,
        audio.duration,
      );
    });

    navigator.mediaSession.setActionHandler("seekto", (details) => {
      if (details.fastSeek && "fastSeek" in audio) {
        audio.fastSeek(details.seekTime!);
        return;
      }
      audio.currentTime = details.seekTime!;
    });
  }

  playIconContainer.addEventListener("click", () => {
    if (audio.paused) {
      audio.play();
      raf = requestAnimationFrame(whilePlaying);
    } else {
      audio.pause();
      if (raf) {
        cancelAnimationFrame(raf);
      }
    }
  });

  // Clip button functionality
  clipButton.addEventListener("click", openClipModal);
  
  // Modal close buttons
  closeModalBtn.addEventListener("click", closeClipModal);
  cancelClipModalBtn.addEventListener("click", closeClipModal);
  modalBackdrop.addEventListener("click", closeClipModal);
  
  // Create clip button
  createClipBtn.addEventListener("click", () => {
    updateSharelinks(true); // Update share links with clip parameters
    
    // Show clip range in main player
    const startPercent = (clipStartTime / audio.duration) * 100;
    const endPercent = (clipEndTime / audio.duration) * 100;
    clipRange.classList.remove('hidden');
    clipRangeBar.style.left = `${startPercent}%`;
    clipRangeBar.style.width = `${endPercent - startPercent}%`;
    
    closeClipModal();
  });
  
  // Clip player controls
  clipPlayBtn.addEventListener("click", () => {
    if (clipAudio.paused) {
      clipAudio.currentTime = clipStartTime;
      clipAudio.play();
      
      // Auto-pause at end time
      const checkEndTime = () => {
        if (clipAudio.currentTime >= clipEndTime) {
          clipAudio.pause();
          clipAudio.removeEventListener('timeupdate', checkEndTime);
        }
      };
      clipAudio.addEventListener('timeupdate', checkEndTime);
    } else {
      clipAudio.pause();
    }
  });
  
  // Preview buttons
  previewStartBtn.addEventListener("click", () => {
    clipAudio.currentTime = clipStartTime;
    clipAudio.play();
    // Play for 3 seconds then pause
    setTimeout(() => {
      if (!clipAudio.paused) {
        clipAudio.pause();
      }
    }, 3000);
  });
  
  previewEndBtn.addEventListener("click", () => {
    // Go to 3 seconds before end
    clipAudio.currentTime = Math.max(clipStartTime, clipEndTime - 3);
    clipAudio.play();
    
    // Auto-pause at end time
    const checkEndTime = () => {
      if (clipAudio.currentTime >= clipEndTime) {
        clipAudio.pause();
        clipAudio.removeEventListener('timeupdate', checkEndTime);
      }
    };
    clipAudio.addEventListener('timeupdate', checkEndTime);
  });
  
  // Timeline scrubbing
  clipTimeline.addEventListener('input', () => {
    clipAudio.currentTime = Number(clipTimeline.value);
  });
  
  // Initialize clip drag and drop
  setupClipDragAndDrop();

  if (audio.readyState > 0) {
    initPlayer();
    updateSharelinks();
  } else {
    audio.addEventListener("loadedmetadata", () => {
      initPlayer();
      updateSharelinks();
      
      // Update media session position state when duration is known
      if ('mediaSession' in navigator && 'setPositionState' in navigator.mediaSession) {
        if (isFinite(audio.duration) && audio.duration > 0) {
          try {
            navigator.mediaSession.setPositionState({
              duration: audio.duration,
              playbackRate: audio.playbackRate,
              position: audio.currentTime
            });
          } catch (error) {
            // Silently ignore to avoid console noise
          }
        }
      }
    });
  }

  audio.addEventListener("play", () => {
    playIconContainer.dataset.state = "playing";

    // If user seeked before playing, apply the seek time
    if (userSeekedBeforePlay && targetSeekTime > 0) {
      // Use playing event to ensure audio is ready on iOS
      const applySeek = () => {
        audio.currentTime = targetSeekTime;
        userSeekedBeforePlay = false;
        audio.removeEventListener("playing", applySeek);
      };
      audio.addEventListener("playing", applySeek, { once: true });
    }
  });

  audio.addEventListener("pause", () => {
    playIconContainer.dataset.state = "paused";
  });

  audio.addEventListener("stop", () => {
    playIconContainer.dataset.state = "stopped";
  });

  let userSeekedBeforePlay = false;
  let targetSeekTime = 0;

  seekSlider.addEventListener("input", () => {
    updateCurrentTime();
    if (!audio.paused) {
      if (raf) {
        cancelAnimationFrame(raf);
      }
    }
  });

  seekSlider.addEventListener("change", () => {
    targetSeekTime = Number(seekSlider.value);
    userSeekedBeforePlay = true;

    // Try to set currentTime if audio is ready
    if (audio.readyState >= 2) {
      audio.currentTime = targetSeekTime;
      userSeekedBeforePlay = false;
    }

    if (!audio.paused) {
      requestAnimationFrame(whilePlaying);
    }
  });

  // Listen for dark mode changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      updateCurrentTime();
    });

  // Set initial progress state
  updateCurrentTime();
</script>
