---
import Layout from "../../layouts/Layout.astro";
import { decode } from 'html-entities';
const { station, timestamp } = Astro.params;

interface StationConfig {
  slug: string;
  audioLoggerUrl: string;
  stationName: string;
  stationBluesky: string;
  stationColor: string;
  openGraphImage: string;
}

const configs: StationConfig[] = [
  {
    slug: "zwfm",
    audioLoggerUrl: "https://audio.zuidwest.cloud/zuidwest",
    stationName: "ZuidWest FM",
    stationBluesky: "zuidwestfm.bsky.social",
    stationColor: "#e6007e",
    openGraphImage:
      "https://cdn.zuidwestupdate.nl/NsUmF_oC7q3NnWIO89789QePS9Pfoimr_4HOZJNVq2I/rs:fill:1280:720:1/g:ce/aHR0cHM6Ly93d3cuenVpZHdlc3R1cGRhdGUubmwvd3AtY29udGVudC91cGxvYWRzLzIwMjEvMDYvc3R1ZGlvX3p3Zm1fcG9zdGVyLmpwZw.jpeg",
  },
  {
    slug: "rucphen",
    audioLoggerUrl: "https://audio.zuidwest.cloud/rucphen",
    stationName: "Rucphen RTV",
    stationBluesky: "rucphenfm.bsky.social",
    stationColor: "#003576",
    openGraphImage:
      "https://rucphenrtv.nl/wp-content/uploads/2021/07/20210717Studio.jpg",
  },
];

const stationConfig = configs.find((config) => config.slug === station);
if (!stationConfig) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}
const {
  audioLoggerUrl,
  stationName,
  stationBluesky,
  stationColor,
  openGraphImage,
} = stationConfig;

let dateRegex = /^(\d{4})-(\d{2})-(\d{2})_(\d{2})$/;
if (!timestamp || !dateRegex.test(timestamp)) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

let audioUrl = `${audioLoggerUrl}/${timestamp}.mp3`;

// Check if the audio file exists
let audioResponse = await fetch(audioUrl, { method: "HEAD" });
if (!audioResponse.ok) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

const t = Astro.url.searchParams.get("t");
let startTime = 0;
let shareFromTimestamp = false;
if (t) {
  startTime = parseInt(t, 10);
  audioUrl += "#t=" + startTime;
  shareFromTimestamp = true;
}

// Decoder for HTML entities
function decodeHtmlEntities(text: string): string {
  if (!text) return '';
  return decode(text);
}

let metadataResponse = await fetch(`${audioLoggerUrl}/${timestamp}.meta`);
let showName = decodeHtmlEntities((await metadataResponse.text()).trim());
if (!showName) {
  showName = "Onbekend programma";
}

// Timestamp is in the form of 2024-05-18_11. Convert that into a date object using a regex
let [, year, month, day, hour] = timestamp.match(dateRegex)!;
let showDate = new Date(
  Number(year),
  Number(month) - 1,
  Number(day),
  Number(hour),
);

const title = `${showName} van ${showDate.toLocaleDateString("NL", { dateStyle: "medium" })} om ${showDate.getHours()} uur`;
const description = `Luister ${showName} van ${showDate.toLocaleDateString("NL", { dateStyle: "medium" })} om ${showDate.getHours()} uur op ${stationName} terug.`;
---

<Layout brandColor={stationColor}>
  <title slot="head">{title}</title>
  <script slot="head" defer event-station={stationName} event-program={showName} src="https://stats.zuidwesttv.nl/js/script.pageview-props.js"></script>
  <meta slot="head" name="description" content={description} />
  <meta slot="head" property="og:title" content={`ðŸ“» ${title}`} />
  <meta slot="head" property="og:description" content={description} />
  <meta slot="head" property="og:type" content="music.song" />
  <meta slot="head" property="og:site_name" content={stationName} />
  <meta slot="head" property="og:image" content={openGraphImage} />
  <meta slot="head" property="og:locale" content="nl_NL" />

  <main class="grid min-h-full place-items-center bg-gray-50 px-4 py-8">
    <div
      class="w-full max-w-2xl overflow-hidden rounded-xl bg-white shadow-md transition-all duration-300 hover:shadow-xl"
    >
      <div class="bg-gradient-to-r from-brand to-brand-dark p-6 text-white">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold">{showName}</h1>
            <p class="mt-1 text-sm opacity-90">
              {showDate.toLocaleDateString("nl", { dateStyle: "medium" })}
              {" om "}
              {showDate.toLocaleTimeString("nl", { timeStyle: "short" })}
            </p>
          </div>
          <div class="flex-shrink-0">
            <a
              href={audioUrl}
              class="rounded-lg bg-white/20 p-2 text-white transition-all duration-200 hover:bg-white/30"
              title="Downloaden"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                class="size-5"
              >
                <path
                  d="M10.75 2.75a.75.75 0 0 0-1.5 0v8.614L6.295 8.235a.75.75 0 1 0-1.09 1.03l4.25 4.5a.75.75 0 0 0 1.09 0l4.25-4.5a.75.75 0 0 0-1.09-1.03l-2.955 3.129V2.75Z"
                ></path>
                <path
                  d="M3.5 12.75a.75.75 0 0 0-1.5 0v2.5A2.75 2.75 0 0 0 4.75 18h10.5A2.75 2.75 0 0 0 18 15.25v-2.5a.75.75 0 0 0-1.5 0v2.5c0 .69-.56 1.25-1.25 1.25H4.75c-.69 0-1.25-.56-1.25-1.25v-2.5Z"
                ></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
      <div class="p-6">
        <audio id="js-audio" src={audioUrl} data-start-time={startTime}></audio>
        <button
          id="js-play"
          class="group relative mb-6 size-20 rounded-full bg-brand text-white shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-xl"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="absolute inset-5 w-10 group-data-[state=playing]:hidden"
          >
            <path
              fill-rule="evenodd"
              d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z"
              clip-rule="evenodd"></path>
          </svg>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            class="absolute inset-5 hidden w-10 group-data-[state=playing]:block"
          >
            <path
              fill-rule="evenodd"
              d="M6.75 5.25a.75.75 0 0 1 .75-.75H9a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H7.5a.75.75 0 0 1-.75-.75V5.25Zm7.5 0A.75.75 0 0 1 15 4.5h1.5a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H15a.75.75 0 0 1-.75-.75V5.25Z"
              clip-rule="evenodd"></path>
          </svg>
        </button>
        <div class="mb-8 rounded-lg bg-gray-50 p-4">
          <div class="flex items-center gap-4">
            <input
              id="js-audio-track"
              class="flex-1 accent-brand"
              type="range"
              max="100"
              value="0"
            />
            <div class="flex-none rounded bg-white px-3 py-1 text-sm tabular-nums shadow-sm">
              <span class="js-current-time">00:00</span> / <span id="js-duration"
                >0:00</span
              >
            </div>
          </div>
        </div>

        <div class="border-t pt-6">
          <p
            class="mb-4 text-sm font-semibold uppercase tracking-wider text-gray-600"
          >
            Deel dit op
          </p>
        <div class="-m-1 mb-2 flex flex-wrap items-center">
          <a
            id="js-share-bluesky"
            href="#"
            target="_blank"
            style="color: #00A8E8"
            class="m-1 flex items-center rounded-lg border border-current px-3 py-2 transition-all duration-200 hover:scale-105 hover:shadow-md"
            data-bluesky-handle={stationBluesky}
          >
            <svg
              width="16"
              height="16"
              viewBox="0 0 600 530"
              class="m-2 fill-current"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="m135.72 44.03c66.496 49.921 138.02 151.14 164.28 205.46 26.262-54.316 97.782-155.54 164.28-205.46 47.98-36.021 125.72-63.892 125.72 24.795 0 17.712-10.155 148.79-16.111 170.07-20.703 73.984-96.144 92.854-163.25 81.433 117.3 19.964 147.14 86.092 82.697 152.22-122.39 125.59-175.91-31.511-189.63-71.766-2.514-7.3797-3.6904-10.832-3.7077-7.8964-0.0174-2.9357-1.1937 0.51669-3.7077 7.8964-13.714 40.255-67.233 197.36-189.63 71.766-64.444-66.128-34.605-132.26 82.697-152.22-67.108 11.421-142.55-7.4491-163.25-81.433-5.9562-21.282-16.111-152.36-16.111-170.07 0-88.687 77.742-60.816 125.72-24.795z"
              ></path>
            </svg>
            Bluesky</a
          >
          <a
            id="js-share-facebook"
            href="#"
            target="_blank"
            style="color: #3B5999"
            class="m-1 flex items-center rounded-lg border border-current px-3 py-2 transition-all duration-200 hover:scale-105 hover:shadow-md"
          >
            <svg
              width="32"
              height="32"
              viewBox="0 0 32 32"
              class="fill-current"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M14.3334 13.7778H12.6667V16H14.3334V22.6667H17.1111V16H19.1345L19.3334 13.7778H17.1111V12.8517C17.1111 12.3211 17.2178 12.1111 17.7306 12.1111H19.3334V9.33333H17.2178C15.22 9.33333 14.3334 10.2128 14.3334 11.8972V13.7778Z"
              ></path>
            </svg>
            Facebook</a
          >
          <a
            id="js-share-whatsapp"
            href="#"
            style="color: #25D366"
            class="m-1 flex items-center rounded-lg border border-current px-3 py-2 transition-all duration-200 hover:scale-105 hover:shadow-md"
          >
            <svg
              width="32"
              height="32"
              viewBox="0 0 32 32"
              class="fill-current"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M8.5 23.5L9.55941 19.6481C8.90568 18.5206 8.56217 17.2425 8.5628 15.9319C8.56468 11.8344 11.915 8.5 16.0314 8.5C18.029 8.50062 19.9042 9.275 21.3146 10.68C22.7244 12.085 23.5006 13.9525 23.5 15.9388C23.4981 20.0369 20.1478 23.3713 16.0314 23.3713C14.7817 23.3706 13.5502 23.0587 12.4594 22.4662L8.5 23.5ZM12.6428 21.1206C13.6953 21.7425 14.7001 22.115 16.0289 22.1156C19.4501 22.1156 22.2371 19.3444 22.239 15.9375C22.2403 12.5238 19.4665 9.75625 16.0339 9.755C12.6101 9.755 9.82504 12.5262 9.82379 15.9325C9.82316 17.3231 10.2326 18.3644 10.9202 19.4537L10.2929 21.7338L12.6428 21.1206ZM19.7936 17.7056C19.7472 17.6281 19.6228 17.5819 19.4357 17.4888C19.2492 17.3956 18.3317 16.9462 18.1603 16.8844C17.9894 16.8225 17.8651 16.7912 17.7401 16.9775C17.6158 17.1631 17.2578 17.5819 17.1492 17.7056C17.0406 17.8294 16.9313 17.845 16.7448 17.7519C16.5583 17.6587 15.9567 17.4631 15.2439 16.83C14.6894 16.3375 14.3145 15.7294 14.2059 15.5431C14.0972 15.3575 14.1945 15.2569 14.2875 15.1644C14.3716 15.0813 14.474 14.9475 14.5676 14.8387C14.6624 14.7312 14.6932 14.6538 14.756 14.5294C14.8181 14.4056 14.7874 14.2969 14.7403 14.2037C14.6932 14.1112 14.3201 13.1969 14.165 12.825C14.0131 12.4631 13.8592 12.5119 13.7449 12.5062L13.387 12.5C13.2626 12.5 13.0604 12.5463 12.8896 12.7325C12.7188 12.9188 12.2365 13.3675 12.2365 14.2819C12.2365 15.1962 12.9053 16.0794 12.9982 16.2031C13.0918 16.3269 14.3139 18.2031 16.1859 19.0075C16.6311 19.1987 16.979 19.3131 17.2497 19.3988C17.6968 19.54 18.1037 19.52 18.4253 19.4725C18.7838 19.4194 19.5293 19.0231 19.685 18.5894C19.8407 18.155 19.8407 17.7831 19.7936 17.7056Z"
              ></path>
            </svg>
            WhatsApp</a
          >
          <a
            id="js-share-mail"
            href="#"
            class="m-1 flex flex-none items-center whitespace-nowrap rounded-lg border border-gray-300 px-3 py-2 text-gray-700 transition-all duration-200 hover:scale-105 hover:shadow-md hover:border-gray-400"
          >
            <svg
              width="16"
              height="16"
              class="m-2 fill-current"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <path
                d="M 12 2 C 6.4886661 2 2 6.4886661 2 12 C 2 17.511334 6.4886661 22 12 22 L 16 22 A 1.0001 1.0001 0 1 0 16 20 L 12 20 C 7.5693339 20 4 16.430666 4 12 C 4 7.5693339 7.5693339 4 12 4 C 16.430666 4 20 7.5693339 20 12 L 20 13.5 C 20 14.340812 19.340812 15 18.5 15 C 17.659188 15 17 14.340812 17 13.5 L 17 12 A 1.0001 1.0001 0 0 0 16.994141 11.888672 C 16.933859 9.1903924 14.712044 7 12 7 C 9.2504209 7 7 9.2504209 7 12 C 7 14.749579 9.2504209 17 12 17 C 13.413556 17 14.687859 16.398875 15.599609 15.447266 C 16.230695 16.380863 17.297708 17 18.5 17 C 20.421188 17 22 15.421188 22 13.5 L 22 12 C 22 6.4886661 17.511334 2 12 2 z M 12 9 C 13.668699 9 15 10.331301 15 12 C 15 13.668699 13.668699 15 12 15 C 10.331301 15 9 13.668699 9 12 C 9 10.331301 10.331301 9 12 9 z"
              ></path>
            </svg>
            E-mail</a
          >
          </div>
          <div class="mt-4 rounded-lg bg-gray-50 p-3">
            <label class="flex items-center text-sm text-gray-600 cursor-pointer hover:text-gray-800">
              <input
                type="checkbox"
                id="js-use-timestamp"
                class="mr-2 accent-brand"
                checked={shareFromTimestamp}
              />
              <span>Delen vanaf <span class="js-current-time font-medium">0:00</span></span>
            </label>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  const calculateTime = (secs: number) => {
    const minutes = ("0" + Math.floor(secs / 60)).slice(-2);
    const seconds = ("0" + Math.floor(secs % 60)).slice(-2);
    return `${minutes}:${seconds}`;
  };

  const updateCurrentTime = () => {
    for (const container of currentTimeContainers) {
      container.textContent = calculateTime(Number(seekSlider.value));
    }
  };

  const whilePlaying = () => {
    seekSlider.value = "" + Math.floor(audio.currentTime);
    updateCurrentTime();
    raf = requestAnimationFrame(whilePlaying);
  };

  const initPlayer = () => {
    audio.currentTime = audio.dataset.startTime
      ? Number(audio.dataset.startTime)
      : 0;
    seekSlider.max = "" + Math.floor(audio.duration);
    seekSlider.value = "" + Math.floor(audio.currentTime);
    updateCurrentTime();
    durationContainer.textContent = calculateTime(audio.duration);
  };

  const updateSharelinks = () => {
    let link = new URL(window.location.href);
    link.searchParams.set("utm_medium", "social");
    link.searchParams.set("utm_campaign", "sharebutton");
    if (useTimestampInput.checked) {
      link.searchParams.set("t", `${seekSlider.value}s`);
    } else {
      // Remove the timestamp parameter in case it was set
      link.searchParams.delete("t");
    }

    const shareBluesky = document.getElementById(
      "js-share-bluesky",
    ) as HTMLAnchorElement;
    const shareFacebook = document.getElementById(
      "js-share-facebook",
    ) as HTMLAnchorElement;
    const shareWhatsapp = document.getElementById(
      "js-share-whatsapp",
    ) as HTMLAnchorElement;
    const shareMail = document.getElementById(
      "js-share-mail",
    ) as HTMLAnchorElement;

    // Bluesky
    const blueskyLink = new URL(link);
    blueskyLink.searchParams.set("utm_source", "Bluesky");

    const blueskyShareUrl = new URL("https://bsky.app/intent/compose");
    blueskyShareUrl.searchParams.set("text", blueskyLink.toString());
    shareBluesky.href = blueskyShareUrl.toString();

    // Facebook
    const facebookLink = new URL(link);
    facebookLink.searchParams.set("utm_source", "Facebook");

    const facebookShareUrl = new URL("https://www.facebook.com/sharer.php");
    facebookShareUrl.searchParams.set("u", facebookLink.toString());
    shareFacebook.href = facebookShareUrl.toString();

    // WhatsApp
    const whatsAppLink = new URL(link);
    whatsAppLink.searchParams.set("utm_source", "WhatsApp");

    const whatsAppShareUrl = new URL("whatsapp://send");
    whatsAppShareUrl.searchParams.set("text", whatsAppLink.toString());
    shareWhatsapp.href = whatsAppShareUrl.toString();

    // Mail
    const mailLink = new URL(link);
    mailLink.searchParams.set("utm_source", "E-mail");

    const mailShareUrl = new URL("mailto:");
    mailShareUrl.searchParams.set("body", mailLink.toString());
    shareMail.href = mailShareUrl.toString();
  };

  const audio = document.getElementById("js-audio") as HTMLAudioElement;
  const seekSlider = document.getElementById(
    "js-audio-track",
  ) as HTMLInputElement;
  const durationContainer = document.getElementById(
    "js-duration",
  ) as HTMLSpanElement;
  const currentTimeContainers =
    document.getElementsByClassName("js-current-time");
  const playIconContainer = document.getElementById(
    "js-play",
  ) as HTMLSpanElement;
  const useTimestampInput = document.getElementById(
    "js-use-timestamp",
  ) as HTMLInputElement;
  let raf: number | null = null;

  playIconContainer.addEventListener("click", () => {
    if (audio.paused) {
      audio.play();
      raf = requestAnimationFrame(whilePlaying);
    } else {
      audio.pause();
      if (raf) {
        cancelAnimationFrame(raf);
      }
    }
  });

  useTimestampInput.addEventListener("change", () => {
    updateSharelinks();
  });

  if (audio.readyState > 0) {
    initPlayer();
    updateSharelinks();
  } else {
    audio.addEventListener("loadedmetadata", () => {
      initPlayer();
      updateSharelinks();
    });
  }

  audio.addEventListener("play", () => {
    playIconContainer.dataset.state = "playing";
    
    // If user seeked before playing, apply the seek time
    if (userSeekedBeforePlay && targetSeekTime > 0) {
      // Use playing event to ensure audio is ready on iOS
      const applySeek = () => {
        audio.currentTime = targetSeekTime;
        userSeekedBeforePlay = false;
        audio.removeEventListener('playing', applySeek);
      };
      audio.addEventListener('playing', applySeek, { once: true });
    }
  });

  audio.addEventListener("pause", () => {
    playIconContainer.dataset.state = "paused";
  });

  audio.addEventListener("stop", () => {
    playIconContainer.dataset.state = "stopped";
  });

  let userSeekedBeforePlay = false;
  let targetSeekTime = 0;

  seekSlider.addEventListener("input", () => {
    updateCurrentTime();
    if (!audio.paused) {
      if (raf) {
        cancelAnimationFrame(raf);
      }
    }
  });

  seekSlider.addEventListener("change", () => {
    targetSeekTime = Number(seekSlider.value);
    userSeekedBeforePlay = true;
    
    // Try to set currentTime if audio is ready
    if (audio.readyState >= 2) {
      audio.currentTime = targetSeekTime;
      userSeekedBeforePlay = false;
    }
    
    if (!audio.paused) {
      requestAnimationFrame(whilePlaying);
    }
  });
</script>
