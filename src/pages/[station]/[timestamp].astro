---
import Layout from "../../layouts/Layout.astro";
import { decode } from "html-entities";
import { getStationConfig } from "../../config/stations";

const { station, timestamp } = Astro.params;
const stationConfig = getStationConfig(station!);
if (!stationConfig) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}
const {
  audioLoggerUrl,
  streamName,
  stationName,
  stationBluesky,
  stationColor,
  stationColorDark,
  openGraphImage,
  faviconUrl,
  logoUrl,
} = stationConfig;

let dateRegex = /^(\d{4})-(\d{2})-(\d{2})_(\d{2})$/;
if (!timestamp || !dateRegex.test(timestamp)) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

// Convert timestamp format for API
// Input: YYYY-MM-DD_HH -> API format: YYYY-MM-DD-HH
const apiTimestamp = timestamp.replace("_", "-");

// Get clip parameters
const t = Astro.url.searchParams.get("t");
const e = Astro.url.searchParams.get("e");
let startTime = 0;
let endTime = 0;
if (t) {
  startTime = parseInt(t, 10);
}
if (e) {
  endTime = parseInt(e, 10);
}

let audioUrl: string;
let downloadUrl: string;

// If we have both start and end times, use the clips API
if (startTime > 0 && endTime > startTime) {
  // Calculate the actual start and end timestamps for the clip
  const [, year, month, day, hour] = timestamp.match(dateRegex)!;
  // Create base timestamp in CET (Amsterdam timezone)
  const baseTimestamp = `${year}-${month}-${day}T${hour}:00:00`;
  
  // Add the clip offsets to create ISO timestamps
  // Use UTC to avoid timezone issues
  const baseDate = new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), 0, 0));
  const clipStartDate = new Date(baseDate.getTime() + startTime * 1000);
  const clipEndDate = new Date(baseDate.getTime() + endTime * 1000);
  
  const clipStartISO = clipStartDate.toISOString().slice(0, 19);
  const clipEndISO = clipEndDate.toISOString().slice(0, 19);

  // Selective URL encoding - only encode + and space characters, not colons
  const encodeTimestamp = (timestamp: string) => timestamp.replace(/\+/g, '%2B').replace(/ /g, '%20');
  
  // Both audio and download use the same clips endpoint for clips
  audioUrl = `${audioLoggerUrl}/api/v1/stations/${streamName}/clips?start=${encodeTimestamp(clipStartISO)}&end=${encodeTimestamp(clipEndISO)}`;
  downloadUrl = audioUrl;
} else {
  // Use download endpoint for both streaming and downloading (has proper duration metadata)
  audioUrl = `${audioLoggerUrl}/api/v1/stations/${streamName}/recordings/${apiTimestamp}/download`;
  downloadUrl = audioUrl;

  // Add fragment for start time if specified
  if (startTime > 0) {
    audioUrl += `#t=${startTime}`;
  }
}

// Check if the recording exists using the recordings endpoint
const recordingCheckUrl = `${audioLoggerUrl}/api/v1/stations/${streamName}/recordings/${apiTimestamp}`;
let recordingResponse = await fetch(recordingCheckUrl, { method: "GET" });
if (!recordingResponse.ok) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

// Fetch metadata from new API
let metadataResponse = await fetch(
  `${audioLoggerUrl}/api/v1/stations/${streamName}/recordings/${apiTimestamp}/metadata`,
);
let showName = "Onbekend programma";

if (metadataResponse.ok) {
  try {
    const metadataJson = (await metadataResponse.json()) as { data?: { metadata?: string } };
    if (metadataJson.data?.metadata) {
      showName = decode(metadataJson.data.metadata.trim());
    }
  } catch (error) {
    console.warn("Failed to parse metadata JSON:", error);
  }
}

// Timestamp is in the form of 2024-05-18_11. Convert that into a date object using a regex
let [, year, month, day, hour] = timestamp.match(dateRegex)!;
let showDate = new Date(
  Number(year),
  Number(month) - 1,
  Number(day),
  Number(hour),
);

const title = `${showName} van ${showDate.toLocaleDateString("NL", { dateStyle: "medium" })} om ${showDate.getHours()} uur`;
const description = `Luister ${showName} van ${showDate.toLocaleDateString("NL", { dateStyle: "medium" })} om ${showDate.getHours()} uur op ${stationName} terug.`;
---

<Layout
  brandColor={stationColor}
  brandColorDark={stationColorDark}
  faviconUrl={faviconUrl}
>
  <title slot="head">{title}</title>
  <script
    slot="head"
    is:inline
    defer
    event-station={stationName}
    event-program={showName}
    src="https://stats.zuidwesttv.nl/js/script.pageview-props.js"></script>
  <meta slot="head" name="description" content={description} />
  <meta slot="head" property="og:title" content={`ðŸ“» ${title}`} />
  <meta slot="head" property="og:description" content={description} />
  <meta slot="head" property="og:type" content="music.song" />
  <meta slot="head" property="og:site_name" content={stationName} />
  <meta slot="head" property="og:image" content={openGraphImage} />
  <meta slot="head" property="og:locale" content="nl_NL" />

  <main class="grid min-h-full place-items-center px-4 py-8">
    <div
      class="w-full max-w-2xl overflow-hidden rounded-xl bg-white shadow-md dark:bg-gray-800 dark:shadow-xl"
    >
      <div
        class="from-brand to-brand-dark relative bg-gradient-to-r p-6 text-white"
      >
        <div class="pr-12">
          <h1 class="text-2xl font-bold">{showName}</h1>
          <p class="mt-1 text-sm opacity-90">
            {showDate.toLocaleDateString("nl", { dateStyle: "medium" })}
            {" om "}
            {showDate.toLocaleTimeString("nl", { timeStyle: "short" })}
          </p>
        </div>
        <div
          class="absolute top-1/2 right-6 flex -translate-y-1/2 items-center gap-2"
        >
          <button
            id="js-clip-toggle"
            class="rounded-full bg-white/20 p-2 backdrop-blur transition-all duration-200 hover:bg-white/30 focus:ring-2 focus:ring-white/50 focus:outline-none"
            title="Maak een clip"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="size-5"
            >
              <circle cx="6" cy="6" r="3"></circle>
              <circle cx="6" cy="18" r="3"></circle>
              <line x1="20" y1="4" x2="8.12" y2="15.88"></line>
              <line x1="14.47" y1="14.48" x2="20" y2="20"></line>
              <line x1="8.12" y1="8.12" x2="12" y2="12"></line>
            </svg>
          </button>
          <a
            id="js-download-btn"
            href={downloadUrl}
            class="rounded-full bg-white/20 p-2 backdrop-blur transition-all duration-200 hover:bg-white/30 focus:ring-2 focus:ring-white/50 focus:outline-none"
            title="Downloaden"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              class="size-5"
            >
              <path
                d="M10.75 2.75a.75.75 0 0 0-1.5 0v8.614L6.295 8.235a.75.75 0 1 0-1.09 1.03l4.25 4.5a.75.75 0 0 0 1.09 0l4.25-4.5a.75.75 0 0 0-1.09-1.03l-2.955 3.129V2.75Z"
              ></path>
              <path
                d="M3.5 12.75a.75.75 0 0 0-1.5 0v2.5A2.75 2.75 0 0 0 4.75 18h10.5A2.75 2.75 0 0 0 18 15.25v-2.5a.75.75 0 0 0-1.5 0v2.5c0 .69-.56 1.25-1.25 1.25H4.75c-.69 0-1.25-.56-1.25-1.25v-2.5Z"
              ></path>
            </svg>
          </a>
        </div>
      </div>
      <div class="p-6">
        <audio
          id="js-audio"
          src={audioUrl}
          preload="auto"
          data-start-time={startTime}
          data-end-time={endTime}
          data-show-name={showName}
          data-station-name={stationName}
          data-station-logo={logoUrl}
          data-audio-logger-url={audioLoggerUrl}
          data-stream-name={streamName}
          data-show-date={showDate.toLocaleDateString("nl", {
            dateStyle: "medium",
          })}></audio>
        <div class="mb-8">
          <div class="flex flex-col items-center space-y-6">
            <button
              id="js-play"
              class="group from-brand to-brand-dark relative size-20 rounded-full bg-gradient-to-br text-white shadow-xl transition-all duration-300 hover:scale-105 hover:shadow-2xl active:scale-95"
            >
              <div
                class="absolute inset-0 rounded-full bg-white opacity-0 transition-opacity duration-300 group-hover:opacity-10"
              >
              </div>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="currentColor"
                class="absolute top-1/2 left-1/2 w-10 -translate-x-1/2 -translate-y-1/2 transition-transform duration-200 group-hover:scale-110 group-data-[state=playing]:hidden"
              >
                <path
                  fill-rule="evenodd"
                  d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z"
                  clip-rule="evenodd"></path>
              </svg>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="currentColor"
                class="absolute top-1/2 left-1/2 hidden w-10 -translate-x-1/2 -translate-y-1/2 transition-transform duration-200 group-hover:scale-110 group-data-[state=playing]:block"
              >
                <path
                  fill-rule="evenodd"
                  d="M6.75 5.25a.75.75 0 0 1 .75-.75H9a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H7.5a.75.75 0 0 1-.75-.75V5.25Zm7.5 0A.75.75 0 0 1 15 4.5h1.5a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H15a.75.75 0 0 1-.75-.75V5.25Z"
                  clip-rule="evenodd"></path>
              </svg>
            </button>

            <div class="w-full space-y-3">
              <div class="relative">
                <input
                  id="js-audio-track"
                  class="[&::-moz-range-progress]:bg-brand h-2 w-full cursor-pointer appearance-none rounded-full bg-gray-200 dark:bg-gray-700 [&::-moz-range-progress]:h-2 [&::-moz-range-progress]:rounded-full [&::-moz-range-thumb]:h-4 [&::-moz-range-thumb]:w-4 [&::-moz-range-thumb]:cursor-pointer [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:border-0 [&::-moz-range-thumb]:bg-white [&::-moz-range-thumb]:shadow-[0_0_0_1px_rgba(0,0,0,0.1),0_2px_4px_rgba(0,0,0,0.2),0_4px_8px_rgba(0,0,0,0.1)] [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:duration-200 [&::-moz-range-thumb]:hover:scale-110 [&::-moz-range-thumb]:hover:shadow-[0_0_0_1px_rgba(0,0,0,0.1),0_2px_6px_rgba(0,0,0,0.3),0_8px_16px_rgba(0,0,0,0.15)] [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-white [&::-webkit-slider-thumb]:shadow-[0_0_0_1px_rgba(0,0,0,0.1),0_2px_4px_rgba(0,0,0,0.2),0_4px_8px_rgba(0,0,0,0.1)] [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:duration-200 [&::-webkit-slider-thumb]:hover:scale-110 [&::-webkit-slider-thumb]:hover:shadow-[0_0_0_1px_rgba(0,0,0,0.1),0_2px_6px_rgba(0,0,0,0.3),0_8px_16px_rgba(0,0,0,0.15)]"
                  type="range"
                  max="100"
                  value="0"
                  style="background-image: linear-gradient(to right, var(--brand-color) 0%, var(--brand-color) 0%, #e5e7eb 0%, #e5e7eb 100%)"
                />
                <!-- Buffer progress indicator -->
                <div
                  id="js-buffer-progress"
                  class="pointer-events-none absolute inset-0 h-2 overflow-hidden rounded-full"
                >
                  <div
                    id="js-buffer-bar"
                    class="h-full rounded-full bg-gray-400/30 transition-[width] duration-500 ease-out dark:bg-gray-500/30"
                    style="width: 0%"
                  >
                  </div>
                </div>
              </div>
              <div
                class="flex items-center justify-between text-sm text-gray-600 dark:text-gray-300"
              >
                <span class="js-current-time font-medium tabular-nums"
                  >00:00</span
                >
                <span
                  id="js-duration"
                  class="font-medium text-gray-500 tabular-nums dark:text-gray-400"
                  >0:00</span
                >
              </div>
            </div>
          </div>
        </div>

        <div class="border-t border-gray-200 pt-6 dark:border-gray-700">
          <!-- Simple clipping controls -->
          <div id="js-clip-controls" class="mb-4 flex hidden flex-wrap gap-2">
            <div class="flex items-center gap-2">
              <button
                id="js-set-start"
                class="relative rounded-lg bg-green-100 px-3 py-1.5 text-sm font-medium text-green-700 transition-colors hover:bg-green-200 dark:bg-green-900/30 dark:text-green-400 dark:hover:bg-green-900/50"
              >
                <span id="js-set-start-text">Begin clip</span>
              </button>
              <button
                id="js-reset-start"
                class="hidden rounded-lg bg-gray-100 p-1.5 text-gray-600 transition-colors hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700"
                title="Reset begin tijd"
              >
                <svg
                  class="h-4 w-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <div class="flex items-center gap-2">
              <button
                id="js-set-end"
                class="rounded-lg bg-red-100 px-3 py-1.5 text-sm font-medium text-red-700 transition-colors hover:bg-red-200 dark:bg-red-900/30 dark:text-red-400 dark:hover:bg-red-900/50"
              >
                <span id="js-set-end-text">Einde clip</span>
              </button>
              <button
                id="js-reset-end"
                class="hidden rounded-lg bg-gray-100 p-1.5 text-gray-600 transition-colors hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700"
                title="Reset einde tijd"
              >
                <svg
                  class="h-4 w-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <button
              id="js-save-clip"
              class="bg-brand/10 text-brand hover:bg-brand/20 dark:bg-brand/20 dark:hover:bg-brand/30 hidden rounded-lg px-3 py-1.5 text-sm font-medium transition-colors"
            >
              Clip opslaan
            </button>
          </div>

          <!-- Clip info banner -->
          <div
            id="js-clip-info"
            class="mb-4 hidden rounded-lg bg-yellow-50 p-4 dark:bg-yellow-900/20"
          >
            <div class="flex items-start justify-between">
              <div>
                <p
                  class="flex items-center gap-2 font-semibold text-gray-900 dark:text-white"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="h-5 w-5 text-yellow-600 dark:text-yellow-400"
                  >
                    <circle cx="6" cy="6" r="3"></circle>
                    <circle cx="6" cy="18" r="3"></circle>
                    <line x1="20" y1="4" x2="8.12" y2="15.88"></line>
                    <line x1="14.47" y1="14.48" x2="20" y2="20"></line>
                    <line x1="8.12" y1="8.12" x2="12" y2="12"></line>
                  </svg>
                  Dit is een clip
                </p>
                <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
                  Van <span id="js-clip-info-start" class="font-medium"
                    >00:00</span
                  > tot <span id="js-clip-info-end" class="font-medium"
                    >00:00</span
                  > (<span id="js-clip-info-duration" class="font-medium"
                    >00:00</span
                  >)
                </p>
              </div>
              <button
                id="js-remove-clip"
                class="rounded-lg p-1 text-gray-500 hover:bg-gray-100 hover:text-gray-700 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-200"
                title="Verwijder clip"
              >
                <svg
                  class="h-5 w-5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>

          <p
            class="mb-4 text-sm font-semibold tracking-wider text-gray-600 uppercase dark:text-gray-300"
          >
            Deel dit op
          </p>
          <div class="-m-1 mb-2 flex flex-wrap items-center">
            <a
              id="js-share-bluesky"
              href="#"
              target="_blank"
              class="text-social-bluesky border-social-bluesky m-1 flex items-center rounded-lg border px-2 py-1 text-sm transition-all duration-200 hover:shadow-md"
              data-bluesky-handle={stationBluesky}
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 600 530"
                class="mr-1.5 fill-current"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="m135.72 44.03c66.496 49.921 138.02 151.14 164.28 205.46 26.262-54.316 97.782-155.54 164.28-205.46 47.98-36.021 125.72-63.892 125.72 24.795 0 17.712-10.155 148.79-16.111 170.07-20.703 73.984-96.144 92.854-163.25 81.433 117.3 19.964 147.14 86.092 82.697 152.22-122.39 125.59-175.91-31.511-189.63-71.766-2.514-7.3797-3.6904-10.832-3.7077-7.8964-0.0174-2.9357-1.1937 0.51669-3.7077 7.8964-13.714 40.255-67.233 197.36-189.63 71.766-64.444-66.128-34.605-132.26 82.697-152.22-67.108 11.421-142.55-7.4491-163.25-81.433-5.9562-21.282-16.111-152.36-16.111-170.07 0-88.687 77.742-60.816 125.72-24.795z"
                ></path>
              </svg>
              Bluesky</a
            >
            <a
              id="js-share-facebook"
              href="#"
              target="_blank"
              class="text-social-facebook dark:text-social-facebook-dark border-social-facebook dark:border-social-facebook-dark m-1 flex items-center rounded-lg border px-2 py-1 text-sm transition-all duration-200 hover:shadow-md"
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                class="mr-1.5 fill-current"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M9.198 21.5h4v-8.01h3.604l.396-3.98h-4V7.5a1 1 0 0 1 1-1h3v-4h-3a5 5 0 0 0-5 5v2.01h-2l-.396 3.98h2.396v8.01z"
                ></path>
              </svg>
              Facebook</a
            >
            <a
              id="js-share-whatsapp"
              href="#"
              class="text-social-whatsapp border-social-whatsapp m-1 flex items-center rounded-lg border px-2 py-1 text-sm transition-all duration-200 hover:shadow-md"
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                class="mr-1.5 fill-current"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"
                ></path>
              </svg>
              WhatsApp</a
            >
            <a
              id="js-share-mail"
              href="#"
              class="text-social-email dark:text-social-email-dark border-social-email dark:border-social-email-dark m-1 flex flex-none items-center rounded-lg border px-2 py-1 text-sm whitespace-nowrap transition-all duration-200 hover:shadow-md"
            >
              <svg
                width="16"
                height="16"
                class="mr-1.5 fill-current"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
              >
                <path
                  d="M 12 2 C 6.4886661 2 2 6.4886661 2 12 C 2 17.511334 6.4886661 22 12 22 L 16 22 A 1.0001 1.0001 0 1 0 16 20 L 12 20 C 7.5693339 20 4 16.430666 4 12 C 4 7.5693339 7.5693339 4 12 4 C 16.430666 4 20 7.5693339 20 12 L 20 13.5 C 20 14.340812 19.340812 15 18.5 15 C 17.659188 15 17 14.340812 17 13.5 L 17 12 A 1.0001 1.0001 0 0 0 16.994141 11.888672 C 16.933859 9.1903924 14.712044 7 12 7 C 9.2504209 7 7 9.2504209 7 12 C 7 14.749579 9.2504209 17 12 17 C 13.413556 17 14.687859 16.398875 15.599609 15.447266 C 16.230695 16.380863 17.297708 17 18.5 17 C 20.421188 17 22 15.421188 22 13.5 L 22 12 C 22 6.4886661 17.511334 2 12 2 z M 12 9 C 13.668699 9 15 10.331301 15 12 C 15 13.668699 13.668699 15 12 15 C 10.331301 15 9 13.668699 9 12 C 9 10.331301 10.331301 9 12 9 z"
                ></path>
              </svg>
              E-mail</a
            >
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  const calculateTime = (secs: number) => {
    // Handle invalid or missing duration, including Infinity
    if (!secs || !isFinite(secs) || secs < 0 || secs === Infinity) {
      return "0:00";
    }
    const minutes = ("0" + Math.floor(secs / 60)).slice(-2);
    const seconds = ("0" + Math.floor(secs % 60)).slice(-2);
    return `${minutes}:${seconds}`;
  };

  const updateCurrentTime = () => {
    for (const container of currentTimeContainers) {
      container.textContent = calculateTime(Number(seekSlider.value));
    }
    // Update slider progress visual
    const percentage =
      (Number(seekSlider.value) / Number(seekSlider.max)) * 100;
    const isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    const bgColor = isDark ? "#374151" : "#e5e7eb";
    seekSlider.style.backgroundImage = `linear-gradient(to right, var(--brand-color) 0%, var(--brand-color) ${percentage}%, ${bgColor} ${percentage}%, ${bgColor} 100%)`;
  };

  const updateSharelinks = () => {
    const link = new URL(window.location.href);
    link.searchParams.set("utm_medium", "social");
    link.searchParams.set("utm_campaign", "sharebutton");

    // Clear existing parameters
    link.searchParams.delete("t");
    link.searchParams.delete("e");

    // If we have a clip, add the parameters
    if (clipStartTime > 0 && clipEndTime > 0) {
      link.searchParams.set("t", String(Math.floor(clipStartTime)));
      link.searchParams.set("e", String(Math.floor(clipEndTime)));
    }

    // Update download button URL
    updateDownloadUrl();

    const shareBluesky = document.getElementById(
      "js-share-bluesky",
    ) as HTMLAnchorElement;
    const shareFacebook = document.getElementById(
      "js-share-facebook",
    ) as HTMLAnchorElement;
    const shareWhatsapp = document.getElementById(
      "js-share-whatsapp",
    ) as HTMLAnchorElement;
    const shareMail = document.getElementById(
      "js-share-mail",
    ) as HTMLAnchorElement;

    // Bluesky
    const blueskyLink = new URL(link);
    blueskyLink.searchParams.set("utm_source", "Bluesky");

    const blueskyShareUrl = new URL("https://bsky.app/intent/compose");
    blueskyShareUrl.searchParams.set("text", blueskyLink.toString());
    shareBluesky.href = blueskyShareUrl.toString();

    // Facebook
    const facebookLink = new URL(link);
    facebookLink.searchParams.set("utm_source", "Facebook");

    const facebookShareUrl = new URL("https://www.facebook.com/sharer.php");
    facebookShareUrl.searchParams.set("u", facebookLink.toString());
    shareFacebook.href = facebookShareUrl.toString();

    // WhatsApp
    const whatsAppLink = new URL(link);
    whatsAppLink.searchParams.set("utm_source", "WhatsApp");

    const whatsAppShareUrl = new URL("whatsapp://send");
    whatsAppShareUrl.searchParams.set("text", whatsAppLink.toString());
    shareWhatsapp.href = whatsAppShareUrl.toString();

    // Mail
    const mailLink = new URL(link);
    mailLink.searchParams.set("utm_source", "E-mail");

    const mailShareUrl = new URL("mailto:");
    mailShareUrl.searchParams.set("body", mailLink.toString());
    shareMail.href = mailShareUrl.toString();
  };

  const updateDownloadUrl = () => {
    // Get timestamp from current URL
    const pathParts = window.location.pathname.split("/");
    const timestamp = pathParts[2];

    // Convert timestamp format for API (YYYY-MM-DD_HH -> YYYY-MM-DD-HH)
    const apiTimestamp = timestamp.replace("_", "-");

    // Get audio logger URL and stream name from audio element data attributes
    const audioLoggerUrl = audio.dataset.audioLoggerUrl || "";
    const streamName = audio.dataset.streamName || "";

    if (clipStartTime > 0 && clipEndTime > clipStartTime) {
      // Calculate the actual start and end timestamps for the clip
      const dateRegex = /^(\d{4})-(\d{2})-(\d{2})_(\d{2})$/;
      const [, year, month, day, hour] = timestamp.match(dateRegex)!;
      const baseDate = new Date(
        Number(year),
        Number(month) - 1,
        Number(day),
        Number(hour),
      );
      const clipStart = new Date(baseDate.getTime() + clipStartTime * 1000);
      const clipEnd = new Date(baseDate.getTime() + clipEndTime * 1000);

      const clipStartISO = clipStart.toISOString().slice(0, 19);
      const clipEndISO = clipEnd.toISOString().slice(0, 19);

      // Selective URL encoding - only encode + and space characters, not colons
      const encodeTimestamp = (timestamp: string) => timestamp.replace(/\+/g, '%2B').replace(/ /g, '%20');
      
      // Use clips endpoint for clipped downloads
      downloadBtn.href = `${audioLoggerUrl}/api/v1/stations/${streamName}/clips?start=${encodeTimestamp(clipStartISO)}&end=${encodeTimestamp(clipEndISO)}`;
    } else {
      // Use download endpoint for full recordings
      downloadBtn.href = `${audioLoggerUrl}/api/v1/stations/${streamName}/recordings/${apiTimestamp}/download`;
    }
  };

  const audio = document.getElementById("js-audio") as HTMLAudioElement;
  const seekSlider = document.getElementById(
    "js-audio-track",
  ) as HTMLInputElement;
  const durationContainer = document.getElementById(
    "js-duration",
  ) as HTMLSpanElement;
  const currentTimeContainers =
    document.getElementsByClassName("js-current-time");
  const playIconContainer = document.getElementById(
    "js-play",
  ) as HTMLSpanElement;
  const bufferBar = document.getElementById("js-buffer-bar") as HTMLDivElement;

  // Clip elements
  const clipToggleBtn = document.getElementById(
    "js-clip-toggle",
  ) as HTMLButtonElement;
  const clipControls = document.getElementById(
    "js-clip-controls",
  ) as HTMLDivElement;
  const setStartBtn = document.getElementById(
    "js-set-start",
  ) as HTMLButtonElement;
  const setStartText = document.getElementById(
    "js-set-start-text",
  ) as HTMLSpanElement;
  const resetStartBtn = document.getElementById(
    "js-reset-start",
  ) as HTMLButtonElement;
  const setEndBtn = document.getElementById("js-set-end") as HTMLButtonElement;
  const setEndText = document.getElementById(
    "js-set-end-text",
  ) as HTMLSpanElement;
  const resetEndBtn = document.getElementById(
    "js-reset-end",
  ) as HTMLButtonElement;
  const saveClipBtn = document.getElementById(
    "js-save-clip",
  ) as HTMLButtonElement;
  const clipInfo = document.getElementById("js-clip-info") as HTMLDivElement;
  const clipInfoStart = document.getElementById(
    "js-clip-info-start",
  ) as HTMLSpanElement;
  const clipInfoEnd = document.getElementById(
    "js-clip-info-end",
  ) as HTMLSpanElement;
  const clipInfoDuration = document.getElementById(
    "js-clip-info-duration",
  ) as HTMLSpanElement;
  const removeClipButton = document.getElementById(
    "js-remove-clip",
  ) as HTMLButtonElement;
  const downloadBtn = document.getElementById(
    "js-download-btn",
  ) as HTMLAnchorElement;

  let raf: number | null = null;
  let clipStartTime = 0;
  let clipEndTime = 0;
  let urlStartTime = 0;
  let urlEndTime = 0;

  // Media Session API setup
  if ("mediaSession" in navigator) {
    const showName = audio.dataset.showName || "Onbekend programma";
    const stationName = audio.dataset.stationName || "";
    const stationLogo = audio.dataset.stationLogo || "";
    const showDate = audio.dataset.showDate || "";

    navigator.mediaSession.metadata = new MediaMetadata({
      title: showName,
      artist: stationName,
      album: `Uitzending van ${showDate}`,
      artwork: [
        { src: stationLogo, sizes: "96x96", type: "image/png" },
        { src: stationLogo, sizes: "128x128", type: "image/png" },
        { src: stationLogo, sizes: "192x192", type: "image/png" },
        { src: stationLogo, sizes: "256x256", type: "image/png" },
        { src: stationLogo, sizes: "384x384", type: "image/png" },
        { src: stationLogo, sizes: "512x512", type: "image/png" },
      ],
    });

    navigator.mediaSession.setActionHandler("play", () => {
      audio.play();
    });

    navigator.mediaSession.setActionHandler("pause", () => {
      audio.pause();
    });

    navigator.mediaSession.setActionHandler("seekbackward", (details) => {
      const skipTime = details.seekOffset || 10;
      audio.currentTime = Math.max(audio.currentTime - skipTime, 0);
    });

    navigator.mediaSession.setActionHandler("seekforward", (details) => {
      const skipTime = details.seekOffset || 10;
      audio.currentTime = Math.min(
        audio.currentTime + skipTime,
        audio.duration,
      );
    });

    navigator.mediaSession.setActionHandler("seekto", (details) => {
      if (details.fastSeek && "fastSeek" in audio) {
        audio.fastSeek(details.seekTime!);
        return;
      }
      audio.currentTime = details.seekTime!;
    });
  }

  playIconContainer.addEventListener("click", () => {
    if (audio.paused) {
      audio.play();
      raf = requestAnimationFrame(whilePlaying);
    } else {
      audio.pause();
      if (raf) {
        cancelAnimationFrame(raf);
      }
    }
  });

  // Clip toggle functionality
  let isClipMode = false;

  clipToggleBtn.addEventListener("click", () => {
    isClipMode = !isClipMode;
    if (isClipMode) {
      clipControls.classList.remove("hidden");
      clipToggleBtn.classList.add("bg-brand", "ring-2", "ring-white/50");
      // Initialize button text with current time
      const currentTime = audio.currentTime;
      if (clipStartTime === 0) {
        setStartText.textContent = `Begin clip (${calculateTime(currentTime)})`;
      } else {
        setStartText.textContent = calculateTime(clipStartTime);
      }

      if (clipEndTime === 0 && clipStartTime > 0) {
        setEndText.textContent = `Einde clip (${calculateTime(currentTime)})`;
      } else if (clipEndTime > 0) {
        setEndText.textContent = calculateTime(clipEndTime);
      }

      // Update visual state of buttons if times are already set
      if (clipStartTime > 0) {
        setStartBtn.classList.add(
          "bg-green-600",
          "text-white",
          "dark:bg-green-700",
        );
        setStartBtn.classList.remove(
          "bg-green-100",
          "text-green-700",
          "dark:bg-green-900/30",
          "dark:text-green-400",
        );
        resetStartBtn.classList.remove("hidden");
      }
      if (clipEndTime > 0) {
        setEndBtn.classList.add("bg-red-600", "text-white", "dark:bg-red-700");
        setEndBtn.classList.remove(
          "bg-red-100",
          "text-red-700",
          "dark:bg-red-900/30",
          "dark:text-red-400",
        );
        resetEndBtn.classList.remove("hidden");
        updateClipInfo();
      }
    } else {
      clipControls.classList.add("hidden");
      clipToggleBtn.classList.remove("bg-brand", "ring-2", "ring-white/50");
      // Reset clip when exiting clip mode
      clipStartTime = 0;
      clipEndTime = 0;
      setStartText.textContent = "Begin clip";
      setEndText.textContent = "Einde clip";
      setStartBtn.classList.remove(
        "bg-green-600",
        "text-white",
        "dark:bg-green-700",
      );
      setStartBtn.classList.add(
        "bg-green-100",
        "text-green-700",
        "dark:bg-green-900/30",
        "dark:text-green-400",
      );
      setEndBtn.classList.remove("bg-red-600", "text-white", "dark:bg-red-700");
      setEndBtn.classList.add(
        "bg-red-100",
        "text-red-700",
        "dark:bg-red-900/30",
        "dark:text-red-400",
      );
      resetStartBtn.classList.add("hidden");
      resetEndBtn.classList.add("hidden");
      saveClipBtn.classList.add("hidden");
      clipInfo.classList.add("hidden");
      updateSharelinks();
    }
  });

  // Simple clip functionality
  setStartBtn.addEventListener("click", () => {
    if (clipStartTime === 0) {
      // Lock in the current time
      clipStartTime = audio.currentTime;
      setStartText.textContent = calculateTime(clipStartTime);
      setStartBtn.classList.add(
        "bg-green-600",
        "text-white",
        "dark:bg-green-700",
      );
      setStartBtn.classList.remove(
        "bg-green-100",
        "text-green-700",
        "dark:bg-green-900/30",
        "dark:text-green-400",
      );
      resetStartBtn.classList.remove("hidden");

      // If end time was already set and is valid, update info
      if (clipEndTime > clipStartTime) {
        updateClipInfo();
      } else if (clipEndTime > 0) {
        // Reset end time if it's before start
        clipEndTime = 0;
        setEndText.textContent = "Einde clip";
        setEndBtn.classList.remove(
          "bg-red-600",
          "text-white",
          "dark:bg-red-700",
        );
        setEndBtn.classList.add(
          "bg-red-100",
          "text-red-700",
          "dark:bg-red-900/30",
          "dark:text-red-400",
        );
        resetEndBtn.classList.add("hidden");
        clipInfo.classList.add("hidden");
      }
    }
  });

  resetStartBtn.addEventListener("click", () => {
    clipStartTime = 0;
    setStartText.textContent = "Begin clip";
    setStartBtn.classList.remove(
      "bg-green-600",
      "text-white",
      "dark:bg-green-700",
    );
    setStartBtn.classList.add(
      "bg-green-100",
      "text-green-700",
      "dark:bg-green-900/30",
      "dark:text-green-400",
    );
    resetStartBtn.classList.add("hidden");
    saveClipBtn.classList.add("hidden");
    clipInfo.classList.add("hidden");
  });

  setEndBtn.addEventListener("click", () => {
    if (clipEndTime === 0 && clipStartTime > 0) {
      // Set end time to current playback position
      const currentTime = audio.currentTime;

      // Ensure end time is after start time with reasonable minimum duration
      if (currentTime <= clipStartTime) {
        // If user is before start time, suggest a 30-second clip from start
        clipEndTime = clipStartTime + 30;
        // But don't exceed audio duration
        if (audio.duration && clipEndTime > audio.duration) {
          clipEndTime = audio.duration;
        }
      } else {
        clipEndTime = currentTime;
      }

      setEndText.textContent = calculateTime(clipEndTime);
      setEndBtn.classList.add("bg-red-600", "text-white", "dark:bg-red-700");
      setEndBtn.classList.remove(
        "bg-red-100",
        "text-red-700",
        "dark:bg-red-900/30",
        "dark:text-red-400",
      );
      resetEndBtn.classList.remove("hidden");

      updateClipInfo();
    }
  });

  resetEndBtn.addEventListener("click", () => {
    clipEndTime = 0;

    // Update button text with current time if in clip mode
    if (isClipMode && clipStartTime > 0) {
      const currentTime = audio.currentTime;
      setEndText.textContent = `Einde clip (${calculateTime(currentTime)})`;
    } else {
      setEndText.textContent = "Einde clip";
    }

    setEndBtn.classList.remove("bg-red-600", "text-white", "dark:bg-red-700");
    setEndBtn.classList.add(
      "bg-red-100",
      "text-red-700",
      "dark:bg-red-900/30",
      "dark:text-red-400",
    );
    resetEndBtn.classList.add("hidden");
    saveClipBtn.classList.add("hidden");
    clipInfo.classList.add("hidden");
  });

  saveClipBtn.addEventListener("click", () => {
    if (clipStartTime > 0 && clipEndTime > clipStartTime) {
      updateSharelinks();
      window.location.href =
        window.location.pathname +
        `?t=${Math.floor(clipStartTime)}&e=${Math.floor(clipEndTime)}`;
    }
  });

  removeClipButton.addEventListener("click", () => {
    clipStartTime = 0;
    clipEndTime = 0;
    urlStartTime = 0; // Clear URL times as well
    urlEndTime = 0;
    isClipMode = false; // Exit clip mode
    setStartText.textContent = "Begin clip";
    setEndText.textContent = "Einde clip";
    setStartBtn.classList.remove(
      "bg-green-600",
      "text-white",
      "dark:bg-green-700",
    );
    setStartBtn.classList.add(
      "bg-green-100",
      "text-green-700",
      "dark:bg-green-900/30",
      "dark:text-green-400",
    );
    setEndBtn.classList.remove("bg-red-600", "text-white", "dark:bg-red-700");
    setEndBtn.classList.add(
      "bg-red-100",
      "text-red-700",
      "dark:bg-red-900/30",
      "dark:text-red-400",
    );
    resetStartBtn.classList.add("hidden");
    resetEndBtn.classList.add("hidden");
    saveClipBtn.classList.add("hidden");
    clipInfo.classList.add("hidden");
    clipControls.classList.add("hidden");
    clipToggleBtn.classList.remove("bg-brand", "ring-2", "ring-white/50");
    updateSharelinks();
    // Navigate to clean URL without parameters
    window.location.href = window.location.pathname;
  });

  const shouldShowSaveButton = () => {
    // Show save button only if:
    // 1. Both start and end times are set
    // 2. End time is after start time
    // 3. The values are different from the URL parameters
    return (
      clipStartTime > 0 &&
      clipEndTime > clipStartTime &&
      (Math.floor(clipStartTime) !== urlStartTime ||
        Math.floor(clipEndTime) !== urlEndTime)
    );
  };

  const updateClipInfo = () => {
    clipInfo.classList.remove("hidden");
    clipInfoStart.textContent = calculateTime(clipStartTime);
    clipInfoEnd.textContent = calculateTime(clipEndTime);
    clipInfoDuration.textContent = calculateTime(clipEndTime - clipStartTime);

    // Update save button visibility
    if (shouldShowSaveButton()) {
      saveClipBtn.classList.remove("hidden");
    } else {
      saveClipBtn.classList.add("hidden");
    }

    // Update share links and download URL
    updateSharelinks();
  };

  const updateBufferProgress = () => {
    if (audio.buffered.length > 0 && audio.duration) {
      const bufferedEnd = audio.buffered.end(audio.buffered.length - 1);
      const bufferPercent = (bufferedEnd / audio.duration) * 100;
      bufferBar.style.width = `${Math.min(bufferPercent, 100)}%`;
    }
  };

  const whilePlaying = () => {
    const currentTime = audio.currentTime;
    seekSlider.value = String(Math.floor(currentTime));
    updateCurrentTime();
    updateBufferProgress();

    // Update clip buttons with current time if in clip mode
    if (isClipMode) {
      // Always update button text with current time if not locked
      if (clipStartTime === 0) {
        setStartText.textContent = `Begin clip (${calculateTime(currentTime)})`;
      }
      // Update end button if start is set but end is not
      if (clipStartTime > 0 && clipEndTime === 0) {
        setEndText.textContent = `Einde clip (${calculateTime(currentTime)})`;
      }
    }

    // Update media session position periodically if duration is known
    if (
      "mediaSession" in navigator &&
      "setPositionState" in navigator.mediaSession
    ) {
      if (isFinite(audio.duration) && audio.duration > 0) {
        try {
          navigator.mediaSession.setPositionState({
            duration: audio.duration,
            playbackRate: audio.playbackRate,
            position: currentTime,
          });
        } catch (error) {
          // Silently ignore to avoid console noise
        }
      }
    }

    raf = requestAnimationFrame(whilePlaying);
  };

  const initClipUI = () => {
    const startTime = audio.dataset.startTime
      ? Number(audio.dataset.startTime)
      : 0;
    const endTime = audio.dataset.endTime ? Number(audio.dataset.endTime) : 0;

    // Store URL parameters
    urlStartTime = startTime;
    urlEndTime = endTime;

    // If we have a clip from URL params, show it
    if (startTime > 0 && endTime > 0) {
      clipStartTime = startTime;
      clipEndTime = endTime;
      isClipMode = true;
      clipControls.classList.remove("hidden");
      clipToggleBtn.classList.add("bg-brand", "ring-2", "ring-white/50");
      setStartText.textContent = calculateTime(clipStartTime);
      setEndText.textContent = calculateTime(clipEndTime);
      setStartBtn.classList.add(
        "bg-green-600",
        "text-white",
        "dark:bg-green-700",
      );
      setStartBtn.classList.remove(
        "bg-green-100",
        "text-green-700",
        "dark:bg-green-900/30",
        "dark:text-green-400",
      );
      setEndBtn.classList.add("bg-red-600", "text-white", "dark:bg-red-700");
      setEndBtn.classList.remove(
        "bg-red-100",
        "text-red-700",
        "dark:bg-red-900/30",
        "dark:text-red-400",
      );
      resetStartBtn.classList.remove("hidden");
      resetEndBtn.classList.remove("hidden");
      // Don't show save button if values match URL
      updateClipInfo();
    }
  };

  const initPlayer = () => {
    const startTime = audio.dataset.startTime
      ? Number(audio.dataset.startTime)
      : 0;

    audio.currentTime = startTime;
    
    // Only set duration if it's valid and not Infinity
    if (isFinite(audio.duration) && audio.duration > 0 && audio.duration !== Infinity) {
      seekSlider.max = String(Math.floor(audio.duration));
      durationContainer.textContent = calculateTime(audio.duration);
    } else {
      seekSlider.max = "0";
      durationContainer.textContent = "0:00";
    }
    
    seekSlider.value = String(Math.floor(audio.currentTime));
    updateCurrentTime();
  };

  // Initialize clip UI immediately (doesn't need audio to be loaded)
  initClipUI();
  updateSharelinks();

  if (audio.readyState > 0) {
    initPlayer();
  } else {
    audio.addEventListener("loadedmetadata", () => {
      initPlayer();

      // Update media session position state when duration is known
      if (
        "mediaSession" in navigator &&
        "setPositionState" in navigator.mediaSession
      ) {
        if (isFinite(audio.duration) && audio.duration > 0) {
          try {
            navigator.mediaSession.setPositionState({
              duration: audio.duration,
              playbackRate: audio.playbackRate,
              position: audio.currentTime,
            });
          } catch (error) {
            // Silently ignore to avoid console noise
          }
        }
      }
    });
  }

  audio.addEventListener("play", () => {
    playIconContainer.dataset.state = "playing";
  });

  audio.addEventListener("pause", () => {
    playIconContainer.dataset.state = "paused";
  });

  // Optimized seeking with debouncing
  let seekTimeout: ReturnType<typeof setTimeout> | null = null;

  seekSlider.addEventListener("input", () => {
    const time = Number(seekSlider.value);
    for (const container of currentTimeContainers) {
      container.textContent = calculateTime(time);
    }

    // Use fastSeek if available for smoother scrubbing
    if (seekTimeout) clearTimeout(seekTimeout);

    seekTimeout = setTimeout(() => {
      if ("fastSeek" in audio && audio.fastSeek) {
        audio.fastSeek(time);
      } else {
        audio.currentTime = time;
      }
    }, 50); // Small delay to batch seeks
  });

  seekSlider.addEventListener("change", () => {
    if (seekTimeout) clearTimeout(seekTimeout);
    const seekTime = Number(seekSlider.value);
    audio.currentTime = seekTime;
  });

  // Buffer progress events
  audio.addEventListener("progress", updateBufferProgress);
  audio.addEventListener("loadeddata", updateBufferProgress);
  audio.addEventListener("canplay", updateBufferProgress);

  // Debug audio loading
  audio.addEventListener("error", (e) => {
    console.error("Audio error:", e);
    console.error("Audio error code:", audio.error?.code);
    console.error("Audio error message:", audio.error?.message);
    console.error("Audio src:", audio.src);
    console.error("Audio network state:", audio.networkState);
    console.error("Audio ready state:", audio.readyState);
    
    // Show error to user
    durationContainer.textContent = "Error";
    durationContainer.style.color = "#dc2626";
  });
  
  audio.addEventListener("loadstart", () => {
    console.log("Audio loading started");
    console.log("Audio src:", audio.src);
    console.log("Audio ready state:", audio.readyState);
    durationContainer.textContent = "Loading...";
    
    // Check if this is a streaming URL that might not have proper duration
    if (audio.src.includes('/play') || audio.src.includes('/clips')) {
      console.log("This appears to be a streaming endpoint");
    }
  });
  
  audio.addEventListener("loadeddata", () => {
    console.log("Audio data loaded");
  });
  
  audio.addEventListener("canplay", () => {
    console.log("Audio can play");
  });
  
  audio.addEventListener("loadedmetadata", () => {
    console.log("Audio metadata loaded, duration:", audio.duration);
    if (isFinite(audio.duration) && audio.duration > 0 && audio.duration !== Infinity) {
      durationContainer.textContent = calculateTime(audio.duration);
      durationContainer.style.color = "";
      seekSlider.max = String(Math.floor(audio.duration));
    } else {
      console.warn("Audio has infinite or invalid duration, this might be a streaming issue");
      durationContainer.textContent = "Live";
      durationContainer.style.color = "#dc2626";
    }
  });

  // Update share links on load
  updateSharelinks();

  // Keyboard shortcuts
  document.addEventListener("keydown", (e) => {
    // Don't handle shortcuts when typing in an input
    if (
      e.target instanceof HTMLInputElement ||
      e.target instanceof HTMLTextAreaElement
    ) {
      return;
    }

    switch (e.key) {
      case " ": // Spacebar
        e.preventDefault();
        playIconContainer.click();
        break;
    }
  });
</script>
